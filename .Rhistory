names(w) <- c("numbers")
names(w)
names(w) <- c("numbers":"numbers")
a
a["two"]
a["one"]
a["One"]
q2 <- c("Ram","Sita","laxman","Ravan","Ram")
factor(q2)
q1 <- as.factor(q2)
q1
edu <- c("Msc","PhD","BSc")
eduFactor <- as.factor(edu, levels = c("BSc","Msc","PhD"),ordered = TRUE)
eduFactor <- factor(edu, levels = c("BSc","Msc","PhD"),ordered = TRUE)
eduFactor
?factor
names <- c("xyz",NA,"doc","kdkd")
is.NA(names)
is.na(names)
x
y
y <- c(-5:4)
y
z <- c("football","cricket","tennis","basketball","TT","squash","swimming",icehockey","hockey","skating")
z <- c("football","cricket","tennis","basketball","TT","squash","swimming","icehockey","hockey","skating")
z
theDataFrame <- data.frame(x,y,z)
theDataFrame
theDataFrame <- data.frame(id = x, teamsize = y, sports = z)
theDataFrame
rows <- nrows(theDataFrame)
rows <- nrow(theDataFrame)
cols <- ncol(theDataFrame)
dimension <- dim(theDataFrame)
rows
cols
dimension
names(theDataFrame)
rownames(theDataFrame)
head(theDataFrame)
head(theDataFrame,7)
tail(theDataFrame)
names(theDataFrame)[3]
theDataFrame$sports
theDataFrame[3]
class(theDataFrame$sports)
class(theDataFrame[3])
theDataFrame[,3]
theDataFrame[,sports]
theDataFrame[,"sports"]
#third row and 2nd and 3rd colums
theDataFrame[3,2:3]
theDataFrame[c(1,3),2:3]
mean(theDataFrame["teamsize"]
)
?mean
mean(theDataFrame[2])
theDataFrame[,2:3]
class(theDataFrame[,2:3])
class(theDataFrame[,2])
theDataFrame[,2]
theDataFrame[,3]
theDataFrame[3]
theDataFrame[[3]]
theDataFrame["sports"]
theDataFrame[["sports"]]
theDataFrame[,3,drop=FALSE]
newFactor <- factor(c("apple","orange","water","papaya","apple"))
newFactor
model.matrix(~newFactor -1)
list1 <- list(c(1:10),theDataFrame)
list1
(list2 <- list(list1,-5:4))
q()
getwd()
library()
ls()
economies
economics
require(ggplot2)
economics
head(economics)
source('~/Personal/Aalto/R/population_plot.r', echo=TRUE)
?scale_color_discrete
source('~/Personal/Aalto/R/population_plot.r', echo=TRUE)
source('~/Personal/Aalto/R/population_plot.r', echo=TRUE)
?scale_y_continuous
source('~/Personal/Aalto/R/population_plot.r', echo=TRUE)
source('~/Personal/Aalto/R/population_plot.r', echo=TRUE)
?scale_y_continuous
say.hello <- function {}
say.hello <- function () {}
say.hello <- function ()
{}
say.hello <- function ()
{
print("Hello World!!")
}
say.hello()
sprintf("Hello %s","Gaurav")
hello.person <- function(name)
{
print(sprintf("Hello %s",name))
}
hello.person("Gaurav")
hello.person("Bob")
hello.person <- function(first,last)
{
print(sprintf("Hello %s %s",first,last))
}
hello.person(first="Gaurav",last="Khullar")
getwd()
getwd()
################Exercise#######################
#
#
#Author: Gaurav Khullar
#Course: Principles of Machine Learning
#Exercise: Exercise 2
#Student Number: 494205
#
###############################################
#Load required packages for plotting
require(ggplot2)
#Create data frames for training & validation sets
data.set <- read.table(file="training_data.txt")
names(data.set) <- c("Decades","Euro_Vs_Dollar")
#Training set is divided into 75%:25% for training and validation
trainingset.rows <- round(0.50 * nrow(data.set))
validationset.row.start.index <- trainingset.rows+1
validationset.row.end.index <- nrow(data.set)
#Split the data set to be 75% training set and 25% validation set
training.set <- data.set[1:trainingset.rows,]
validation.set <- data.set[validationset.row.start.index:nrow(data.set),]
#Create data frame for test set
test.set <- read.table(file="test_data.txt")
names(test.set) <- c("Decades","Euro_Vs_Dollar")
##########
#Create helper function for performing regression
#Arguments: y is matrix of dependent variable
#Arguments: x is matrix of independent variable
#Returns: A matrix of regression parameters and standard error of residuals.
###########
reg <- function(y,x) 
{
x <- as.matrix(x)#Convert x to matrix
x <- cbind(Intercept = 1,x)#Add 1's to first column, 1's represent the coefficient of intercepts
b <- solve(t(x) %*% x) %*% t(x) %*% y   #b = inverse(XtX).(XtY) for standard error of residuals to be minumum. 
#find residual
H <- x %*% solve(t(x) %*% x) %*% t(x)
e <- y - H %*% y
res <- sum(e^2)/nrow(e)
res <- sqrt(res)
rbind(b,std.error.trg = res)
}
##########
#Create helper function for finding standard error when model is applied to new data frame
#Arguments: y is matrix of dependent variable
#Arguments: x is matrix of independent variable
#Arguments: b is the regression model to be applied to the data frame
#Returns: The standard error when the model is applied to the data frame.
###########
residual <- function(y,x,b) 
{
# Y = Xb + e
# Residual is calculated e = Y-Xb
x <- as.matrix(x)
x <- cbind(Intercept = 1,x)
e <- y - (x %*% b)
e.squared <- e^2
e.squared.sum <- sum(e.squared)
res <- e.squared.sum/nrow(e)
rms <- sqrt(res)
}
X <- training.set$Decades# Assigning Decades from training set to X
Y <- training.set$Euro_Vs_Dollar# Assigning Exchange rate from training set to Y
X_Val <- validation.set$Decades# Assigning Decades from Validation set to X_Val
Y_Val <- validation.set$Euro_Vs_Dollar# Assigning Exchange rate from Validation set to V_Val
regression_order <- 8# Applying regression to order of 8.
i <- 1# Assigning 1 to i for iterating over regression models per each order
models <- list()# models is the list that will contain all models for each order
errors <- data.frame()
std_errors <- data.frame()# errors is a list that will contain std errors for training and validation
for (i in 1:regression_order) {
if(i > 1) {
X <- cbind(X,training.set$Decades^i)#If order is greater than 1, then add respective order column to X
X_Val <- cbind(X_Val,validation.set$Decades^i) #If order is greater than 1, then add respective order column to X_Val
}
model <- reg(y = Y,x = X)#The regression model is stored in model
models[i] <- list(model)#Each model is added to a list
training_error <- model["std.error.trg",]#
length.model <- nrow(model)
validation_error <- residual(y = Y_Val,x = X_Val,model[1:length.model-1,])
std_errors <- data.frame(training_error,validation_error) #training and validation errors are added to a data.frame
errors <- rbind(errors,std_errors)
}
#Find the index of the model with the lowest validation error
index_min_error <- which(errors$validation_error == min(errors$validation_error))
#testing against test set
i <- 1
x_test = cbind(test.set$Decades)
for(i in index_min_error) {
if(i > 1) {
x_test = cbind(x_test,test.set$Decades^i)
}
}
print(errors)
sprintf("Model with lowest validation error is of order %d",index_min_error)
selected_model <- matrix(models[[index_min_error]][1:nrow(models[[index_min_error]])-1,])
print("****Testing against test set*****")
test_error <- residual(y = test.set$Euro_Vs_Dollar,x = x_test,selected_model)
print(test_error)
#plotting
second.function <- function(x) 
{
secondD.equation <- models[[2]]
b0 <- secondD.equation["Intercept",1]
b1 <- secondD.equation[2,1]
b2 <- secondD.equation[3,1]
b0 + b1*x + b2*x^2
}
third.function <- function(x)
{
thirdD.equation <- models[[3]]
b0 <- thirdD.equation["Intercept",1]
b1 <- thirdD.equation[2,1]
b2 <- thirdD.equation[3,1]
b3 <- thirdD.equation[4,1]
b0 + b1*x + b2*x^2 + b3*x^3
}
four.function <- function(x)
{
fourD.equation <- models[[4]]
b0 <- thirdD.equation["Intercept",1]
b1 <- thirdD.equation[2,1]
b2 <- thirdD.equation[3,1]
b3 <- thirdD.equation[4,1]
b4 <- thirdD.equation[5,1]
b0 + b1*x + b2*x^2 + b3*x^3 + b4*x^4
}
ggplot(data.set,aes(x=Decades,y=Euro_Vs_Dollar)) + geom_point() + 
stat_function(fun = second.function, aes(colour = "2nd Order")) + 
stat_function(fun = third.function, aes(colour = "3rd Order")) +
stat_function(fun = four.function, aes(colour = "4th Order")) + 
scale_colour_manual("Legend title", values = c("red", "blue", "brown"))
################Exercise#######################
#
#
#Author: Gaurav Khullar
#Course: Principles of Machine Learning
#Exercise: Exercise 2
#Student Number: 494205
#
###############################################
#Load required packages for plotting
require(ggplot2)
#Create data frames for training & validation sets
data.set <- read.table(file="training_data.txt")
names(data.set) <- c("Decades","Euro_Vs_Dollar")
#Training set is divided into 75%:25% for training and validation
trainingset.rows <- round(0.50 * nrow(data.set))
validationset.row.start.index <- trainingset.rows+1
validationset.row.end.index <- nrow(data.set)
#Split the data set to be 75% training set and 25% validation set
training.set <- data.set[1:trainingset.rows,]
validation.set <- data.set[validationset.row.start.index:nrow(data.set),]
#Create data frame for test set
test.set <- read.table(file="test_data.txt")
names(test.set) <- c("Decades","Euro_Vs_Dollar")
##########
#Create helper function for performing regression
#Arguments: y is matrix of dependent variable
#Arguments: x is matrix of independent variable
#Returns: A matrix of regression parameters and standard error of residuals.
###########
reg <- function(y,x) 
{
x <- as.matrix(x)#Convert x to matrix
x <- cbind(Intercept = 1,x)#Add 1's to first column, 1's represent the coefficient of intercepts
b <- solve(t(x) %*% x) %*% t(x) %*% y   #b = inverse(XtX).(XtY) for standard error of residuals to be minumum. 
#find residual
H <- x %*% solve(t(x) %*% x) %*% t(x)
e <- y - H %*% y
res <- sum(e^2)/nrow(e)
res <- sqrt(res)
rbind(b,std.error.trg = res)
}
##########
#Create helper function for finding standard error when model is applied to new data frame
#Arguments: y is matrix of dependent variable
#Arguments: x is matrix of independent variable
#Arguments: b is the regression model to be applied to the data frame
#Returns: The standard error when the model is applied to the data frame.
###########
residual <- function(y,x,b) 
{
# Y = Xb + e
# Residual is calculated e = Y-Xb
x <- as.matrix(x)
x <- cbind(Intercept = 1,x)
e <- y - (x %*% b)
e.squared <- e^2
e.squared.sum <- sum(e.squared)
res <- e.squared.sum/nrow(e)
rms <- sqrt(res)
}
X <- training.set$Decades# Assigning Decades from training set to X
Y <- training.set$Euro_Vs_Dollar# Assigning Exchange rate from training set to Y
X_Val <- validation.set$Decades# Assigning Decades from Validation set to X_Val
Y_Val <- validation.set$Euro_Vs_Dollar# Assigning Exchange rate from Validation set to V_Val
regression_order <- 15# Applying regression to order of 8.
i <- 1# Assigning 1 to i for iterating over regression models per each order
models <- list()# models is the list that will contain all models for each order
errors <- data.frame()
std_errors <- data.frame()# errors is a list that will contain std errors for training and validation
for (i in 1:regression_order) {
if(i > 1) {
X <- cbind(X,training.set$Decades^i)#If order is greater than 1, then add respective order column to X
X_Val <- cbind(X_Val,validation.set$Decades^i) #If order is greater than 1, then add respective order column to X_Val
}
model <- reg(y = Y,x = X)#The regression model is stored in model
models[i] <- list(model)#Each model is added to a list
training_error <- model["std.error.trg",]#
length.model <- nrow(model)
validation_error <- residual(y = Y_Val,x = X_Val,model[1:length.model-1,])
std_errors <- data.frame(training_error,validation_error) #training and validation errors are added to a data.frame
errors <- rbind(errors,std_errors)
}
#Find the index of the model with the lowest validation error
index_min_error <- which(errors$validation_error == min(errors$validation_error))
#testing against test set
i <- 1
x_test = cbind(test.set$Decades)
for(i in index_min_error) {
if(i > 1) {
x_test = cbind(x_test,test.set$Decades^i)
}
}
print(errors)
sprintf("Model with lowest validation error is of order %d",index_min_error)
selected_model <- matrix(models[[index_min_error]][1:nrow(models[[index_min_error]])-1,])
print("****Testing against test set*****")
test_error <- residual(y = test.set$Euro_Vs_Dollar,x = x_test,selected_model)
print(test_error)
#plotting
second.function <- function(x) 
{
secondD.equation <- models[[2]]
b0 <- secondD.equation["Intercept",1]
b1 <- secondD.equation[2,1]
b2 <- secondD.equation[3,1]
b0 + b1*x + b2*x^2
}
third.function <- function(x)
{
thirdD.equation <- models[[3]]
b0 <- thirdD.equation["Intercept",1]
b1 <- thirdD.equation[2,1]
b2 <- thirdD.equation[3,1]
b3 <- thirdD.equation[4,1]
b0 + b1*x + b2*x^2 + b3*x^3
}
four.function <- function(x)
{
fourD.equation <- models[[4]]
b0 <- thirdD.equation["Intercept",1]
b1 <- thirdD.equation[2,1]
b2 <- thirdD.equation[3,1]
b3 <- thirdD.equation[4,1]
b4 <- thirdD.equation[5,1]
b0 + b1*x + b2*x^2 + b3*x^3 + b4*x^4
}
ggplot(data.set,aes(x=Decades,y=Euro_Vs_Dollar)) + geom_point() + 
stat_function(fun = second.function, aes(colour = "2nd Order")) + 
stat_function(fun = third.function, aes(colour = "3rd Order")) +
stat_function(fun = four.function, aes(colour = "4th Order")) + 
scale_colour_manual("Legend title", values = c("red", "blue", "brown"))
################Exercise#######################
#
#
#Author: Gaurav Khullar
#Course: Principles of Machine Learning
#Exercise: Exercise 2
#Student Number: 494205
#
###############################################
#Load required packages for plotting
require(ggplot2)
#Create data frames for training & validation sets
data.set <- read.table(file="training_data.txt")
names(data.set) <- c("Decades","Euro_Vs_Dollar")
#Training set is divided into 75%:25% for training and validation
trainingset.rows <- round(0.50 * nrow(data.set))
validationset.row.start.index <- trainingset.rows+1
validationset.row.end.index <- nrow(data.set)
#Split the data set to be 75% training set and 25% validation set
training.set <- data.set[1:trainingset.rows,]
validation.set <- data.set[validationset.row.start.index:nrow(data.set),]
#Create data frame for test set
test.set <- read.table(file="test_data.txt")
names(test.set) <- c("Decades","Euro_Vs_Dollar")
##########
#Create helper function for performing regression
#Arguments: y is matrix of dependent variable
#Arguments: x is matrix of independent variable
#Returns: A matrix of regression parameters and standard error of residuals.
###########
reg <- function(y,x) 
{
x <- as.matrix(x)#Convert x to matrix
x <- cbind(Intercept = 1,x)#Add 1's to first column, 1's represent the coefficient of intercepts
b <- solve(t(x) %*% x) %*% t(x) %*% y   #b = inverse(XtX).(XtY) for standard error of residuals to be minumum. 
#find residual
H <- x %*% solve(t(x) %*% x) %*% t(x)
e <- y - H %*% y
res <- sum(e^2)/nrow(e)
res <- sqrt(res)
rbind(b,std.error.trg = res)
}
##########
#Create helper function for finding standard error when model is applied to new data frame
#Arguments: y is matrix of dependent variable
#Arguments: x is matrix of independent variable
#Arguments: b is the regression model to be applied to the data frame
#Returns: The standard error when the model is applied to the data frame.
###########
residual <- function(y,x,b) 
{
# Y = Xb + e
# Residual is calculated e = Y-Xb
x <- as.matrix(x)
x <- cbind(Intercept = 1,x)
e <- y - (x %*% b)
e.squared <- e^2
e.squared.sum <- sum(e.squared)
res <- e.squared.sum/nrow(e)
rms <- sqrt(res)
}
X <- training.set$Decades# Assigning Decades from training set to X
Y <- training.set$Euro_Vs_Dollar# Assigning Exchange rate from training set to Y
X_Val <- validation.set$Decades# Assigning Decades from Validation set to X_Val
Y_Val <- validation.set$Euro_Vs_Dollar# Assigning Exchange rate from Validation set to V_Val
regression_order <- 15# Applying regression to order of 8.
i <- 1# Assigning 1 to i for iterating over regression models per each order
models <- list()# models is the list that will contain all models for each order
errors <- data.frame()
std_errors <- data.frame()# errors is a list that will contain std errors for training and validation
for (i in 1:regression_order) {
if(i > 1) {
X <- cbind(X,training.set$Decades^i)#If order is greater than 1, then add respective order column to X
X_Val <- cbind(X_Val,validation.set$Decades^i) #If order is greater than 1, then add respective order column to X_Val
}
model <- reg(y = Y,x = X)#The regression model is stored in model
models[i] <- list(model)#Each model is added to a list
training_error <- model["std.error.trg",]#
length.model <- nrow(model)
validation_error <- residual(y = Y_Val,x = X_Val,model[1:length.model-1,])
std_errors <- data.frame(training_error,validation_error) #training and validation errors are added to a data.frame
errors <- rbind(errors,std_errors)
}
print("*****Models are*****")
print(models)
#Find the index of the model with the lowest validation error
index_min_error <- which(errors$validation_error == min(errors$validation_error))
#testing against test set
i <- 1
x_test = cbind(test.set$Decades)
for(i in index_min_error) {
if(i > 1) {
x_test = cbind(x_test,test.set$Decades^i)
}
}
print(errors)
sprintf("Model with lowest validation error is of order %d",index_min_error)
selected_model <- matrix(models[[index_min_error]][1:nrow(models[[index_min_error]])-1,])
print("****Testing against test set*****")
test_error <- residual(y = test.set$Euro_Vs_Dollar,x = x_test,selected_model)
print(test_error)
#plotting
second.function <- function(x) 
{
secondD.equation <- models[[2]]
b0 <- secondD.equation["Intercept",1]
b1 <- secondD.equation[2,1]
b2 <- secondD.equation[3,1]
b0 + b1*x + b2*x^2
}
third.function <- function(x)
{
thirdD.equation <- models[[3]]
b0 <- thirdD.equation["Intercept",1]
b1 <- thirdD.equation[2,1]
b2 <- thirdD.equation[3,1]
b3 <- thirdD.equation[4,1]
b0 + b1*x + b2*x^2 + b3*x^3
}
four.function <- function(x)
{
fourD.equation <- models[[4]]
b0 <- thirdD.equation["Intercept",1]
b1 <- thirdD.equation[2,1]
b2 <- thirdD.equation[3,1]
b3 <- thirdD.equation[4,1]
b4 <- thirdD.equation[5,1]
b0 + b1*x + b2*x^2 + b3*x^3 + b4*x^4
}
ggplot(data.set,aes(x=Decades,y=Euro_Vs_Dollar)) + geom_point() + 
stat_function(fun = second.function, aes(colour = "2nd Order")) + 
stat_function(fun = third.function, aes(colour = "3rd Order")) +
stat_function(fun = four.function, aes(colour = "4th Order")) + 
scale_colour_manual("Legend title", values = c("red", "blue", "brown"))
q()
